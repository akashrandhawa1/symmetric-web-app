#!/usr/bin/env node
import { mkdirSync, writeFileSync, existsSync } from 'node:fs';
import { dirname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';
import dotenv from 'dotenv';

const __dirname = dirname(fileURLToPath(import.meta.url));
const publicDir = resolve(__dirname, '../public');
mkdirSync(publicDir, { recursive: true });

const loadEnvFile = (relativePath) => {
  const filePath = resolve(__dirname, '..', relativePath);
  if (existsSync(filePath)) {
    dotenv.config({ path: filePath, override: false });
  }
};

loadEnvFile('.env');
loadEnvFile('.env.local');

const lifecycle = process.env.npm_lifecycle_event ?? '';
const isProdBuild = lifecycle.includes('build');
const allowEmpty = process.env.ALLOW_EMPTY_GEMINI === '1';

const rawEnableFlag = process.env.VITE_ENABLE_GEMINI ?? process.env.ENABLE_GEMINI;
const rawCoachFlag = process.env.VITE_ENABLE_COACH_API ?? process.env.ENABLE_COACH_API;
const rawDailyFlag = process.env.VITE_ENABLE_DAILY_PROXY ?? process.env.ENABLE_DAILY_PROXY ?? rawCoachFlag;
const rawForceLocal = process.env.VITE_COACH_FORCE_LOCAL ?? process.env.COACH_FORCE_LOCAL ?? process.env.FORCE_LOCAL_COACH;
const apiKeyRaw = process.env.VITE_GEMINI_API_KEY ?? process.env.GEMINI_API_KEY ?? '';
const apiKey = apiKeyRaw.trim();

const asciiOnly = (value) => [...value].every((char) => (char.codePointAt(0) ?? 0) <= 0xff);

if (isProdBuild && !allowEmpty && (!apiKey || !apiKey.trim())) {
  console.error('\n[embed-env] Missing VITE_GEMINI_API_KEY while building for production.');
  console.error('Set VITE_GEMINI_API_KEY (and optionally VITE_ENABLE_GEMINI=1) before running `npm run build`.\n');
  process.exit(1);
}

if (apiKey && !asciiOnly(apiKey)) {
  console.error('\n[embed-env] VITE_GEMINI_API_KEY contains non-ASCII characters. Copy the key again from Google AI Studio.\n');
  process.exit(1);
}

const enableFlag = rawEnableFlag ?? (apiKey ? '1' : undefined);
const coachFlag = rawCoachFlag ?? '0';
const dailyFlag = rawDailyFlag ?? coachFlag ?? '0';

const enableValue = enableFlag === undefined ? 'undefined' : JSON.stringify(enableFlag);
const keyValue = apiKey ? JSON.stringify(apiKey) : '""';
const coachValue = coachFlag === undefined ? 'undefined' : JSON.stringify(coachFlag);
const dailyValue = dailyFlag === undefined ? 'undefined' : JSON.stringify(dailyFlag);
const forceLocalValue = rawForceLocal === undefined ? 'undefined' : JSON.stringify(rawForceLocal);
const rawWsUrl = process.env.VITE_COACH_WS_URL ?? process.env.COACH_WS_URL ?? process.env.NEXT_PUBLIC_COACH_WS_URL;
const wsUrlValue = rawWsUrl === undefined ? 'undefined' : JSON.stringify(rawWsUrl);

const output = `// Auto-generated by scripts/embed-env.mjs\n` +
  `window.__ENABLE_GEMINI__ = ${enableValue};\n` +
  `window.__GEMINI_KEY__ = ${keyValue};\n` +
  `window.__ENABLE_COACH_API__ = ${coachValue};\n` +
  `window.__ENABLE_DAILY_PROXY__ = ${dailyValue};\n` +
  `window.__COACH_FORCE_LOCAL__ = ${forceLocalValue};\n` +
  `window.__COACH_WS_URL__ = ${wsUrlValue};\n`;

const outputPath = resolve(publicDir, 'runtime-env.js');
writeFileSync(outputPath, output);

if (process.env.NODE_ENV !== 'test') {
  console.info('[embed-env] runtime env written to', outputPath);
  if (enableFlag !== undefined) {
    console.info('[embed-env] enable flag:', enableFlag);
  } else {
    console.info('[embed-env] enable flag not provided â€“ falling back to bundle defaults.');
  }
  console.info('[embed-env] coach proxy flag:', coachFlag ?? '(default 0)');
  console.info('[embed-env] daily proxy flag:', dailyFlag ?? '(default coach flag)');
  if (rawForceLocal !== undefined) {
    console.info('[embed-env] coach force-local flag:', rawForceLocal);
  }
  if (rawWsUrl !== undefined) {
    console.info('[embed-env] coach ws url:', rawWsUrl);
  }
  console.info('[embed-env] GEMINI key present:', Boolean(apiKey));
}
